module.exports = Realtime

var fs = require('fs')
var http = require('http')
var path = require('path')
var util = require('util')

var SocketIO = require('socket.io')

function Realtime(config, filename){
  var i = 0;
  this.config = config

  this.initialize()
}

Realtime.prototype.watchConfig = function watchConfig(){
  var self = this
  fs.watchFile(filename, function(curr, prev){
    if(curr.mtime > prev.mtime){
      delete require.cache[filename]
      self.config = require(filename)
      if(self.started){
        self.shutdown()
        self.initialize()
        self.listen()
      }
      else{
        self.initialize()
      }
    }
  })
}

Realtime.prototype.initialize = function(){

  this.webapp = http.createServer()

  if(this.config.webapp){
    var webapp = require.resolve(path.resolve(this.config.webapp))
    delete require.cache[webapp]
    require(webapp)(this.webapp)
  }

  for(var i in this.appcache){
    var app = require.resolve(path.resolve(this.config.appFolder, this.appcache[i]))
    delete require.cache[app]
  }

  this.appcache = {}

  var opts = {}

  if(this.config.redisStore){
    var redis = require('redis')
    var redisStore = this.config.redisStore

    //simpler than redisPub / redisSub / redisClient
    var fakeRedis = {
      createClient: function(){
        return redis.createClient(redisStore.port, redisStore.host)
      },
      RedisClient: redis.RedisClient
    }

    if(redisStore.socketPath)
      port = path.resolve(redisStore.socketPath)

    opts.store = new SocketIO.RedisStore({redis: fakeRedis})
  }

  this.sockapp = SocketIO.listen(this.webapp, opts)

  var self = this

  var sockConfig = this.config['socket.io']

  for(var setting in sockConfig){
    this.sockapp.set(setting, sockConfig[setting])
  }

  for(var appname in this.config.apps){
    var app = this.config.apps[appname]
    var config = typeof app == 'object' ? app : null
    var main = config ? config.main : app
    var namespace = this.sockapp.of('/' + appname)
    require(path.resolve(this.config.appFolder, main))(namespace, config)
  }
}

Realtime.prototype.shutdown = function(){
  this.webapp.close()
}

Realtime.prototype.listen = function listen(port, host){
  //if used listen with arguments, maintain arguments after refresh
  if(port){
    this.port = port
    this.host = host
  }
  port = this.port || this.config.socketPath || this.config.port
  host = this.host || this.config.host

  this.webapp.listen(port, host)

  this.started = true

}
